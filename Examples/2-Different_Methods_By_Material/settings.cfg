# You can define methods that should be
# run on all materials that don't have a
# specified configuration in settings.cfg
[DEFAULT]

# You can also define methods that should be 
# common between all files run through ZEM,
# even ones that have a per material definition
[COMMON]
    ; Provide a relative or full path to the method file
    method_file = .\method_files\common.xml

    ; If any <Outline> tag has a Method with type equal to
    ; this string, we will try changing the method type based on layer name
    ; to the most fitting one in the <Methods> section in the ZCC file
    change_type_on = '{none}'

    ; If any <Outline> tags have a Method on a layer that has a name
    ; that matches a string in this array, delete the entire <Outline>
    ; from the ZCC file.
    delete_layers = ["#meta-data","none"]

# These are per material definitions
# You can add these that match the name
# of your material in your ZCC file and
# ZEM will treat that file differently
[9mm FELT] 
    ; Provide a material specific method file
    method_file = .\method_files\9mm.xml


# Note: If there are conflicting settings
# between two definitions being run on the same file
# The priority is given to whichever comes last in the file.

# Note: Exceptions are made for delete_layers and method_file
# which BOTH run together without overwriting eachother.


# This is where you can define how the program actually runs.
# You can change if ZEM watches a folder and ingests, where it outputs to, etc.

# If cfg becomes corrupt, or certain definitions are missing, ZEM will silently fail.
[META]
    ; Should ZEM test its environment prior to running
    ; If false, ZEM will not test it's environment and you're on your own.
    ; If true, ZEM will test that it has access to all files and folders below
    ; and test that it has permissions to write, read, and delete from all of them
    ; It should drop a file called environment_report.txt next to the main python file
    ; and exit on an unsuccessful test, or continue on a successful test.
    test_environment = true

    ; Should ZEM log its actions to a file (useful for debugging)
    log_to_file = true

    ; Provide a path to a log file. If dir given, ZEM will attempt
    ; to create a log file. If file given, ZEM will attempt to
    ; use that file and write to it.
    path_to_log = C:\ZEM\log.txt

    ; Sets log file behavior
    ; Set to "overwrite" to make ZEM clear out the log file on start
    ; Set to "append" to have ZEM keep an ongoing log file (Might create huge log files!)
    log_behavior = append

    ; Should ZEM run continuously and watch a certain folder
    ; If false, zem will work on the files in the hotfolder
    ; at runtime (provided that retroactively_process is true). 
    ; When no other files remain, it will close.
    ; If true, zem will continuously work on any file that
    ; goes in to the hotfolder, only closing when manually
    ; closed.
    ; If this is false, and retroactively_process is also false
    ; ZEM will do NOTHING and close. Do not submit a bug report for this.
    watch_hotfolder = true

    ; BE CAREFUL!!
    ; Should ZEM retroactively processes files in the hotfolder_dir
    ; that were moved there before ZEM was started
    ; If false, ZEM will only process files as they are added to the hotfolder
    ; If true, ZEM will process every file in the directory (Which could be hundreds!)

    ; Please take care when using this option. You should really only use this in
    ; certain circumstances, like when watch_hotfolder is false and you have a small
    ; number of files.
    retroactively_process = false

    ; Should ZEM delete the old version of the file
    ; If false, ZEM will simply move the file to the directory
    ; outlined in the "original_files_dir" key
    ; If true, ZEM will attempt to delete the file.
    delete_file_after_processing = false

    ; What should ZEM append before the .zcc file extension
    ; If not set, defaults to ".zem".
    append_extension_string = .zem

    ; What hotfolder should ZEM operate out of
    ; Full path to already existing hotfolder is necessary. 
    ; Do not use relative path.
    hotfolder_dir = C:\ZEM\hotfolder\

    ; What folder should ZEM output to
    ; Full path to already existing output folder is necessary.
    ; Do not use relative path.
    output_dir = C:\ZEM\output\

    ; Where should ZEM store the unprocessed version
    ; of any file it works on
    ; Only used if delete_file_after_processing = true
    ; Must not be hotfolder_dir or output_dir or ZEM will refuse to run.
    ; Full path to already existing original files dir is necessary. 
    ; Do not use relative path.
    original_files_dir = C:\ZEM\original_files\